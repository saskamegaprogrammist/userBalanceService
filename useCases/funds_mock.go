// Code generated by MockGen. DO NOT EDIT.
// Source: useCases/funds_interface.go

// Package mock_useCases is a generated GoMock package.
package useCases

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/saskamegaprogrammist/userBalanceService/models"
	reflect "reflect"
)

// MockFundsUCInterface is a mock of FundsUCInterface interface
type MockFundsUCInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFundsUCInterfaceMockRecorder
}

// MockFundsUCInterfaceMockRecorder is the mock recorder for MockFundsUCInterface
type MockFundsUCInterfaceMockRecorder struct {
	mock *MockFundsUCInterface
}

// NewMockFundsUCInterface creates a new mock instance
func NewMockFundsUCInterface(ctrl *gomock.Controller) *MockFundsUCInterface {
	mock := &MockFundsUCInterface{ctrl: ctrl}
	mock.recorder = &MockFundsUCInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFundsUCInterface) EXPECT() *MockFundsUCInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockFundsUCInterface) Add(tx *models.Transaction) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockFundsUCInterfaceMockRecorder) Add(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFundsUCInterface)(nil).Add), tx)
}

// Withdraw mocks base method
func (m *MockFundsUCInterface) Withdraw(tx *models.Transaction) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", tx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Withdraw indicates an expected call of Withdraw
func (mr *MockFundsUCInterfaceMockRecorder) Withdraw(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockFundsUCInterface)(nil).Withdraw), tx)
}

// Get mocks base method
func (m *MockFundsUCInterface) Get(balance *models.Balance) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", balance)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFundsUCInterfaceMockRecorder) Get(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFundsUCInterface)(nil).Get), balance)
}

// Transfer mocks base method
func (m *MockFundsUCInterface) Transfer(tx *models.Transaction) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", tx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Transfer indicates an expected call of Transfer
func (mr *MockFundsUCInterfaceMockRecorder) Transfer(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockFundsUCInterface)(nil).Transfer), tx)
}

// GetTransactions mocks base method
func (m *MockFundsUCInterface) GetTransactions(user *models.UserId, limit int, since, sort string, desc bool) (bool, []models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", user, limit, since, sort, desc)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]models.Transaction)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockFundsUCInterfaceMockRecorder) GetTransactions(user, limit, since, sort, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockFundsUCInterface)(nil).GetTransactions), user, limit, since, sort, desc)
}
