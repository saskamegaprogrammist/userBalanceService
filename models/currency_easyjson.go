// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE5a98965DecodeGithubComSaskamegaprogrammistUserBalanceServiceModels(in *jlexer.Lexer, out *CurrencyAll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rates":
			easyjsonE5a98965Decode(in, &out.Rates)
		case "base":
			out.Base = string(in.String())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5a98965EncodeGithubComSaskamegaprogrammistUserBalanceServiceModels(out *jwriter.Writer, in CurrencyAll) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rates\":"
		out.RawString(prefix[1:])
		easyjsonE5a98965Encode(out, in.Rates)
	}
	{
		const prefix string = ",\"base\":"
		out.RawString(prefix)
		out.String(string(in.Base))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyAll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE5a98965EncodeGithubComSaskamegaprogrammistUserBalanceServiceModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyAll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5a98965EncodeGithubComSaskamegaprogrammistUserBalanceServiceModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyAll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE5a98965DecodeGithubComSaskamegaprogrammistUserBalanceServiceModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyAll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5a98965DecodeGithubComSaskamegaprogrammistUserBalanceServiceModels(l, v)
}
func easyjsonE5a98965Decode(in *jlexer.Lexer, out *struct {
	CAD float64 `json:"CAD"`
	HKD float64 `json:"HKD"`
	ISK float64 `json:"ISK"`
	PHP float64 `json:"PHP"`
	DKK float64 `json:"DKK"`
	HUF float64 `json:"HUF"`
	CZK float64 `json:"CZK"`
	EUR float64 `json:"EUR"`
	AUD float64 `json:"AUD"`
	RON float64 `json:"RON"`
	SEK float64 `json:"SEK"`
	IDR float64 `json:"IDR"`
	INR float64 `json:"INR"`
	BRL float64 `json:"BRL"`
	RUB float64 `json:"RUB"`
	HRK float64 `json:"HRK"`
	JPY float64 `json:"JPY"`
	THB float64 `json:"THB"`
	CHF float64 `json:"CHF"`
	SGD float64 `json:"SGD"`
	PLN float64 `json:"PLN"`
	BGN float64 `json:"BGN"`
	TRY float64 `json:"TRY"`
	CNY float64 `json:"CNY"`
	NOK float64 `json:"NOK"`
	NZD float64 `json:"NZD"`
	ZAR float64 `json:"ZAR"`
	USD float64 `json:"USD"`
	MXN float64 `json:"MXN"`
	ILS float64 `json:"ILS"`
	GBP float64 `json:"GBP"`
	KRW float64 `json:"KRW"`
	MYR float64 `json:"MYR"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CAD":
			out.CAD = float64(in.Float64())
		case "HKD":
			out.HKD = float64(in.Float64())
		case "ISK":
			out.ISK = float64(in.Float64())
		case "PHP":
			out.PHP = float64(in.Float64())
		case "DKK":
			out.DKK = float64(in.Float64())
		case "HUF":
			out.HUF = float64(in.Float64())
		case "CZK":
			out.CZK = float64(in.Float64())
		case "EUR":
			out.EUR = float64(in.Float64())
		case "AUD":
			out.AUD = float64(in.Float64())
		case "RON":
			out.RON = float64(in.Float64())
		case "SEK":
			out.SEK = float64(in.Float64())
		case "IDR":
			out.IDR = float64(in.Float64())
		case "INR":
			out.INR = float64(in.Float64())
		case "BRL":
			out.BRL = float64(in.Float64())
		case "RUB":
			out.RUB = float64(in.Float64())
		case "HRK":
			out.HRK = float64(in.Float64())
		case "JPY":
			out.JPY = float64(in.Float64())
		case "THB":
			out.THB = float64(in.Float64())
		case "CHF":
			out.CHF = float64(in.Float64())
		case "SGD":
			out.SGD = float64(in.Float64())
		case "PLN":
			out.PLN = float64(in.Float64())
		case "BGN":
			out.BGN = float64(in.Float64())
		case "TRY":
			out.TRY = float64(in.Float64())
		case "CNY":
			out.CNY = float64(in.Float64())
		case "NOK":
			out.NOK = float64(in.Float64())
		case "NZD":
			out.NZD = float64(in.Float64())
		case "ZAR":
			out.ZAR = float64(in.Float64())
		case "USD":
			out.USD = float64(in.Float64())
		case "MXN":
			out.MXN = float64(in.Float64())
		case "ILS":
			out.ILS = float64(in.Float64())
		case "GBP":
			out.GBP = float64(in.Float64())
		case "KRW":
			out.KRW = float64(in.Float64())
		case "MYR":
			out.MYR = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5a98965Encode(out *jwriter.Writer, in struct {
	CAD float64 `json:"CAD"`
	HKD float64 `json:"HKD"`
	ISK float64 `json:"ISK"`
	PHP float64 `json:"PHP"`
	DKK float64 `json:"DKK"`
	HUF float64 `json:"HUF"`
	CZK float64 `json:"CZK"`
	EUR float64 `json:"EUR"`
	AUD float64 `json:"AUD"`
	RON float64 `json:"RON"`
	SEK float64 `json:"SEK"`
	IDR float64 `json:"IDR"`
	INR float64 `json:"INR"`
	BRL float64 `json:"BRL"`
	RUB float64 `json:"RUB"`
	HRK float64 `json:"HRK"`
	JPY float64 `json:"JPY"`
	THB float64 `json:"THB"`
	CHF float64 `json:"CHF"`
	SGD float64 `json:"SGD"`
	PLN float64 `json:"PLN"`
	BGN float64 `json:"BGN"`
	TRY float64 `json:"TRY"`
	CNY float64 `json:"CNY"`
	NOK float64 `json:"NOK"`
	NZD float64 `json:"NZD"`
	ZAR float64 `json:"ZAR"`
	USD float64 `json:"USD"`
	MXN float64 `json:"MXN"`
	ILS float64 `json:"ILS"`
	GBP float64 `json:"GBP"`
	KRW float64 `json:"KRW"`
	MYR float64 `json:"MYR"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CAD\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CAD))
	}
	{
		const prefix string = ",\"HKD\":"
		out.RawString(prefix)
		out.Float64(float64(in.HKD))
	}
	{
		const prefix string = ",\"ISK\":"
		out.RawString(prefix)
		out.Float64(float64(in.ISK))
	}
	{
		const prefix string = ",\"PHP\":"
		out.RawString(prefix)
		out.Float64(float64(in.PHP))
	}
	{
		const prefix string = ",\"DKK\":"
		out.RawString(prefix)
		out.Float64(float64(in.DKK))
	}
	{
		const prefix string = ",\"HUF\":"
		out.RawString(prefix)
		out.Float64(float64(in.HUF))
	}
	{
		const prefix string = ",\"CZK\":"
		out.RawString(prefix)
		out.Float64(float64(in.CZK))
	}
	{
		const prefix string = ",\"EUR\":"
		out.RawString(prefix)
		out.Float64(float64(in.EUR))
	}
	{
		const prefix string = ",\"AUD\":"
		out.RawString(prefix)
		out.Float64(float64(in.AUD))
	}
	{
		const prefix string = ",\"RON\":"
		out.RawString(prefix)
		out.Float64(float64(in.RON))
	}
	{
		const prefix string = ",\"SEK\":"
		out.RawString(prefix)
		out.Float64(float64(in.SEK))
	}
	{
		const prefix string = ",\"IDR\":"
		out.RawString(prefix)
		out.Float64(float64(in.IDR))
	}
	{
		const prefix string = ",\"INR\":"
		out.RawString(prefix)
		out.Float64(float64(in.INR))
	}
	{
		const prefix string = ",\"BRL\":"
		out.RawString(prefix)
		out.Float64(float64(in.BRL))
	}
	{
		const prefix string = ",\"RUB\":"
		out.RawString(prefix)
		out.Float64(float64(in.RUB))
	}
	{
		const prefix string = ",\"HRK\":"
		out.RawString(prefix)
		out.Float64(float64(in.HRK))
	}
	{
		const prefix string = ",\"JPY\":"
		out.RawString(prefix)
		out.Float64(float64(in.JPY))
	}
	{
		const prefix string = ",\"THB\":"
		out.RawString(prefix)
		out.Float64(float64(in.THB))
	}
	{
		const prefix string = ",\"CHF\":"
		out.RawString(prefix)
		out.Float64(float64(in.CHF))
	}
	{
		const prefix string = ",\"SGD\":"
		out.RawString(prefix)
		out.Float64(float64(in.SGD))
	}
	{
		const prefix string = ",\"PLN\":"
		out.RawString(prefix)
		out.Float64(float64(in.PLN))
	}
	{
		const prefix string = ",\"BGN\":"
		out.RawString(prefix)
		out.Float64(float64(in.BGN))
	}
	{
		const prefix string = ",\"TRY\":"
		out.RawString(prefix)
		out.Float64(float64(in.TRY))
	}
	{
		const prefix string = ",\"CNY\":"
		out.RawString(prefix)
		out.Float64(float64(in.CNY))
	}
	{
		const prefix string = ",\"NOK\":"
		out.RawString(prefix)
		out.Float64(float64(in.NOK))
	}
	{
		const prefix string = ",\"NZD\":"
		out.RawString(prefix)
		out.Float64(float64(in.NZD))
	}
	{
		const prefix string = ",\"ZAR\":"
		out.RawString(prefix)
		out.Float64(float64(in.ZAR))
	}
	{
		const prefix string = ",\"USD\":"
		out.RawString(prefix)
		out.Float64(float64(in.USD))
	}
	{
		const prefix string = ",\"MXN\":"
		out.RawString(prefix)
		out.Float64(float64(in.MXN))
	}
	{
		const prefix string = ",\"ILS\":"
		out.RawString(prefix)
		out.Float64(float64(in.ILS))
	}
	{
		const prefix string = ",\"GBP\":"
		out.RawString(prefix)
		out.Float64(float64(in.GBP))
	}
	{
		const prefix string = ",\"KRW\":"
		out.RawString(prefix)
		out.Float64(float64(in.KRW))
	}
	{
		const prefix string = ",\"MYR\":"
		out.RawString(prefix)
		out.Float64(float64(in.MYR))
	}
	out.RawByte('}')
}
